{"version":3,"sources":["services/auth.js","components/iq_Navbar.js","components/iq_Startpage.js","components/iq_Signup.js","components/iq_Login.js","components/iq_Training.js","components/iq_Resultlist.js","components/iq_result.js","components/iq_admin.js","App.js","serviceWorker.js","index.js"],"names":["signup","username","password","axios","post","then","response","data","catch","err","login","IqNavbar","props","className","bg","user","to","onClick","delete","setUser","IqStartpage","React","Component","IqSignup","state","error","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","message","history","push","console","log","this","Form","onSubmit","Group","Label","htmlFor","Control","type","id","onChange","Alert","variant","Button","IqLogin","IqTraining","action","href","IqResultlist","results","get","resultList","map","result","caseNumber","numberOfCases","score","resultInPercentage","Math","round","key","_id","userName","testName","complexity","elapsedTime","Iqresult","scores","questions","ergebnis","toString","IqAdmin","onclick","max","min","alt","App","trainingRoute","resultListRoute","resultRoute","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aed579ab.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst signup = (username, password) => {\r\n  return axios\r\n    .post(\"/api/auth/signup\", {\r\n      username: username,\r\n      password: password\r\n    })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      return err.response.data;\r\n    });\r\n};\r\n\r\nconst login = (username, password) => {\r\n  return axios\r\n    .post(\"/api/auth/login\", {\r\n      username: username,\r\n      password: password\r\n    })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      return err.response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  axios.delete(\"/api/auth/logout\");\r\n};\r\n\r\nexport { signup, login, logout };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar as Nav } from \"react-bootstrap\";\r\nimport { logout } from \"../services/auth\";\r\n\r\nconst IqNavbar = props => {\r\n  const handleLogout = () => {\r\n    // destroys the session on the server\r\n    logout();\r\n    // updates the `user` state in App\r\n    props.setUser(null);\r\n  };\r\n\r\n  return (\r\n    <Nav className=\"nav justify-content-end\" bg=\"primary\">\r\n      {props.user ? (\r\n        <div>\r\n          <Link to=\"/\">Welcome {props.user.username}</Link>\r\n          <Link to=\"/training\">Training</Link>\r\n          <Link to=\"/result\">Result</Link>\r\n          <Link to=\"/resultlist\">Resultlist</Link>\r\n          <Link to=\"/\" onClick={handleLogout}>\r\n            Logout\r\n          </Link>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Link to=\"/\">Home</Link>\r\n          <Link to=\"/signup\">Signup</Link>\r\n          <Link to=\"/login\">Login</Link>\r\n        </div>\r\n      )}\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default IqNavbar;\r\n","import React from \"react\";\r\nimport '../stylesheets/iq_startpage.css';\r\n\r\nclass IqStartpage extends React.Component {\r\n    render() {\r\n        return (            \r\n            <section className = \"homePage-container\">\r\n                <div>\r\n                    <h1>IQtty</h1>\r\n                    <p>Use our brain trainer</p>\r\n                    <p>Prepare for Assessment Centers and Logic-Tests</p>\r\n                    <p>Signup and try our amazing brain game</p>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default IqStartpage;","import React, { Component } from \"react\";\r\nimport { signup } from \"../services/auth\";\r\nimport { Alert, Form, Button } from \"react-bootstrap\";\r\n\r\nclass IqSignup extends Component {\r\n  state = {\r\n    username: \"\",\r\n    password: \"\",\r\n    error: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    signup(this.state.username, this.state.password).then(data => {\r\n      if (data.message) {\r\n        // handle errors\r\n        this.setState({\r\n          error: data.message\r\n        });\r\n      } else {\r\n        // no error\r\n        // lift the data up to the App state\r\n        this.props.setUser(data);\r\n        // redirect to \"/projects\"\r\n        this.props.history.push(\"/training\");\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div>\r\n        <h2>Signup</h2>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label htmlFor=\"username\">Username: </Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"username\"\r\n              id=\"username\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label htmlFor=\"password\">Password: </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Form.Group>\r\n          {this.state.error && (\r\n            <Alert variant=\"danger\">{this.state.error}</Alert>\r\n          )}\r\n          <Button type=\"submit\">Sign up</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IqSignup;\r\n","import React, { Component } from \"react\";\r\nimport { login } from \"../services/auth\";\r\nimport { Alert, Form, Button } from \"react-bootstrap\";\r\n\r\nclass IqLogin extends Component {\r\n  state = {\r\n    username: \"\",\r\n    password: \"\",\r\n    error: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    login(this.state.username, this.state.password).then(data => {\r\n      if (data.message) {\r\n        // handle errors\r\n        this.setState({\r\n          error: data.message\r\n        });\r\n      } else {\r\n        // no error\r\n        // lift the data up to the App state\r\n        this.props.setUser(data);\r\n        // redirect to \"/projects\"\r\n        this.props.history.push(\"/training\");\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Login</h2>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label htmlFor=\"username\">Username: </Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"username\"\r\n              id=\"username\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label htmlFor=\"password\">Password: </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Form.Group>\r\n          {this.state.error && (\r\n            <Alert variant=\"danger\">{this.state.error}</Alert>\r\n          )}\r\n          <Button type=\"submit\">Log in</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IqLogin;\r\n","import React, { Component } from 'react'\r\nimport \"../stylesheets/iq_training.css\"\r\n\r\nclass IqTraining extends Component {\r\n  render() {\r\n    return (\r\n      <section className = \"trainingsPage-container\">\r\n        <div>\r\n          <h1>Welcome to IQtty training</h1>\r\n          <p>Matrix tests are used in assessment centers to examine your skills in inductive reasoning.</p>\r\n          <p>A matrix consists of nine boxes. One box is empty.</p>\r\n          <p>Your task is to discover logical connections and compose the empty box based on the rule you found.</p>\r\n          <p>Click here to start a test</p>\r\n          \r\n          <form className=\"trainingsPage-button-box\" action = \"/test/new\" >          \r\n              <input className=\"trainingsPage-button\" type=\"submit\" value=\"Start test\"/>\r\n          </form>    \r\n          \r\n          <p>Your results you can find under\r\n            <a href=\"/resultlist\"> Test Result List</a>\r\n          </p>        \r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IqTraining;","\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../stylesheets/iq_resultlist.css'\r\n\r\nclass IqResultlist extends Component {\r\n  state = {\r\n    results: []        \r\n    };       \r\n    \r\n  componentDidMount() {\r\n      console.log(\"AllResults --> componentDidMount()\")\r\n      axios.get(\"/api/resultlist\")\r\n          .then(response => {\r\n              console.log(\"AllResults --> Promise resolved\")\r\n              console.log(\"Promise resolved Data\", response.data)\r\n              this.setState({ results: response.data })\r\n          })\r\n          .catch(err => {\r\n            console.log(\"Error occured: \", err);\r\n          });\r\n  }\r\n\r\n  render() {\r\n       \r\n    const resultList = this.state.results.map((result) => {\r\n      let caseNumber = result.numberOfCases;\r\n      let score = result.score;\r\n      let resultInPercentage = Math.round(score/caseNumber * 100)\r\n\r\n      return (\r\n        <div className=\"trResultlist\" key={result._id}>\r\n          <div className=\"tdResultlist\">{result.userName}</div>\r\n          <div className=\"tdResultlist\">{result.testName}</div>\r\n          <div className=\"tdResultlist\">{result.complexity}</div>\r\n          <div className=\"tdResultlist\">{result.elapsedTime}</div>\r\n          <div className=\"tdResultlist\">{result.numberOfCases}</div>\r\n          <div className=\"tdResultlist\">{result.score}</div>\r\n          <div className=\"tdResultlist\">{resultInPercentage} %</div>\r\n        </div>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <div>      \r\n        <div className = \"resultlistPage\">\r\n          <section className= \"table-resultlist\">\r\n            <h1 className=\"header\">Your Test Results</h1>\r\n            <div className=\"tableResultlist-box\">        \r\n              <div className=\"tableResultlist\">\r\n                <div className=\"trResultlist\">\r\n                  <div className=\"thResultlist\">User</div>\r\n                  <div className=\"thResultlist\">Test</div>\r\n                  <div className=\"thResultlist\">Complexity</div>\r\n                  <div className=\"thResultlist\">Elapsed Time</div>\r\n                  <div className=\"thResultlist\">Number of Test Cases</div>\r\n                  <div className=\"thResultlist\">Score</div>\r\n                  <div className=\"thResultlist\">Result</div>\r\n                </div>\r\n                  \r\n                {resultList}            \r\n                \r\n              </div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IqResultlist;","import React, { Component } from 'react';\r\nimport '../stylesheets/iq_result.css';\r\nimport axios from \"axios\";\r\n\r\nexport class Iqresult extends Component {\r\n    state = {\r\n      result: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      console.log(\"App --> componentDidMount()\")\r\n      axios.get(\"/api/results\")\r\n          .then(response => {\r\n              /* console.log(\"App --> Promise resolved\") */\r\n              this.setState({result: response.data});\r\n          })\r\n      .catch(err=>{\r\n        console.log(\"Fehler bei iq_result Component Did mount\", err);\r\n      })\r\n     \r\n  }\r\n \r\n  render() {\r\n   /*  console.log(this.state.result);\r\n    console.log(this.state.result.userName); */\r\n    let scores = this.state.result.score;\r\n    let questions = this.state.result.numberOfCases;\r\n    let ergebnis = (Math.round((scores / questions) * 100)).toString();\r\n    console.log(typeof(ergebnis))\r\n    return (\r\n      <div className=\"resultPage\">\r\n        <div className=\"resultHeader\">\r\n          <h1>\r\n            Result of your current test\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"tableresult\">\r\n          <div className=\"resulttr1\">\r\n            <div className=\"resultth\">Name :</div>\r\n            <div className=\"resulttd\">{this.state.result.userName}</div>\r\n          </div>\r\n          <div className=\"resulttr\">\r\n            <div className=\"resultth\">Test Name :</div>\r\n            <div className=\"resulttd\">{this.state.result.testName}</div>\r\n          </div>\r\n          <div className=\"resulttr1\">\r\n            <div className=\"resultth\">Elapsed Time :</div>\r\n            <div className=\"resulttd\">{this.state.result.elapsedTime}</div>\r\n          </div>\r\n          <div className=\"resulttr\">\r\n            <div className=\"resultth\">Executed Cases :</div>\r\n            <div className=\"resulttd\">{this.state.result.numberOfCases}</div>\r\n          </div>\r\n          <div className=\"resulttr1\">\r\n            <div className=\"resultth\">Your Score :</div>\r\n            <div className=\"resulttd\">{this.state.result.score}</div>\r\n          </div>\r\n          <div className=\"resulttr\">\r\n            <div className=\"resultth\">Complexity :</div>\r\n            <div className=\"resulttd\">{this.state.result.complexity}</div>\r\n          </div>\r\n          <div className=\"resulttr1\">\r\n            <div className=\"resultth\">Percentage :</div>\r\n            <div className=\"resulttd\">{ergebnis}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"resultfooter\">\r\n          <h1>You have reached : {this.state.result.score}  Points</h1>\r\n        </div>\r\n\r\n        <div className=\"buttonbox\">\r\n          <form action=\"/training\">\r\n            <input className=\"rbutton\" type=\"submit\" value=\"Training\" />\r\n          </form>\r\n\r\n          <form action=\"/resultlist\">\r\n            <input className=\"rbutton\" type=\"submit\" value=\"Resultlist\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Iqresult\r\n\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/iq_admin.css';\r\n\r\nexport default class IqAdmin extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <h1>Admin Page</h1>\r\n                <div className=\"tableAdmin\">\r\n                <ul>\r\n                <p>\r\n               <li><button onclick= \"generateComponents()\">1. Components</button></li>\r\n                </p>\r\n                <p>\r\n                <li><button onclick=\"generateCases()\">2. Cases</button>\r\n                Number of Components : <input  id=\"compNumber\" type=\"number\" max=\"6\" min=\"1\" alt=\"Number of Components\"/></li>\r\n                </p>\r\n                <p>\r\n                <button onclick=\"generateTests()\">3. Tests</button>\r\n                Number of Testcases : <input id=\"numbTc\" type=\"number\"  max=\"10\" min=\"1\"/>\r\n                Max case complexity : <input id=\"caseComplexity\" type=\"number\" max=\"3\" min=\"1\"/>\r\n                </p>\r\n                </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {Switch, Route, Redirect } from \"react-router-dom\";\r\nimport IqNavbar from \"./components/iq_Navbar\";\r\nimport IqStartpage from \"./components/iq_Startpage\";\r\n/* import Projects from \"./components/Projects\";\r\nimport ProjectDetail from \"./components/ProjectDetail\";\r\nimport TaskDetail from \"./components/TaskDetail\"; */\r\nimport IqSignup from \"./components/iq_Signup\";\r\nimport IqLogin from \"./components/iq_Login\";\r\nimport IqTraining from \"./components/iq_Training\";\r\nimport IqResultlist from \"./components/iq_Resultlist\";\r\nimport Iqresult from \"./components/iq_result\";\r\nimport IqAdmin from \"./components/iq_admin.js\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    user: this.props.user\r\n  };\r\n\r\n  setUser = user => {\r\n    this.setState({\r\n      user: user\r\n    });\r\n  };\r\n\r\n  /* projectsRoute = props => {\r\n    if (this.state.user) {\r\n      return <Projects {...props} />;\r\n    } else {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n  } */\r\n\r\n  trainingRoute = props => {\r\n    if (this.state.user) {\r\n      return <IqTraining {...props} />;\r\n    } else {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n  }\r\n\r\n  resultListRoute = props => {\r\n    if (this.state.user) {\r\n      return <IqResultlist {...props} />;\r\n    } else {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n  }\r\n\r\n  resultRoute = props => {\r\n    if (this.state.user) {\r\n      return <Iqresult {...props} />;\r\n    } else {\r\n      return <Redirect to=\"/\" />\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <IqNavbar user={this.state.user} setUser={this.setUser} />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={IqStartpage} />\r\n          <Route exact path=\"/signup\" render={\r\n            props => <IqSignup {...props} setUser={this.setUser} />\r\n          }/>\r\n          <Route exact path=\"/login\" render={\r\n            props => <IqLogin {...props} setUser={this.setUser} />\r\n          }/>\r\n          <Route exact path=\"/training\" render={this.trainingRoute}/>\r\n          <Route exact path=\"/resultlist\" render={this.resultListRoute}/>\r\n          <Route exact path=\"/xadmin\" component={IqAdmin}/>\r\n          <Route exact path=\"/result\" render={\r\n            props => <Iqresult user={this.state.user} {...props}/>\r\n          }/>          \r\n\r\n          <Route exact path=\"/result\" render={this.resultRoute}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\"; // npm install boostrap\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\naxios.get(\"/api/auth/loggedin\").then(response => {\r\n  const user = response.data;\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <App user={user} />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n  );\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}